@model QuanLyThongTinDaoTao.Models.LopHoc

@{
    ViewBag.Title = "Chỉnh Sửa Lớp Học";
    Layout = "~/Areas/Admin/Views/Shared/_MainAdminLayout.cshtml";
}

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header bg-warning text-white text-center">
            <h3><i class="fa-solid fa-pen-to-square"></i> Chỉnh Sửa Lớp Học</h3>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Edit", "LopHoc", FormMethod.Post, new { enctype = "multipart/form-data", id = "editForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.LopHocId)

                <div class="col-md-6 mb-3">
                    @Html.LabelFor(model => model.MaLopHoc, "Mã Lớp Học", new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.MaLopHoc, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.MaLopHoc, "", new { @class = "text-danger" })
                </div>
                <div class="row">

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.TenLopHoc, "Tên Lớp Học", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.TenLopHoc, new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.TenLopHoc, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.SoTinChi, "Số Tín Chỉ", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.SoTinChi, new { @class = "form-control", type = "number", min = 1, required = "required" })
                        @Html.ValidationMessageFor(model => model.SoTinChi, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.NgayBatDau, "Ngày Bắt Đầu", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.NgayBatDau, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                        @Html.ValidationMessageFor(model => model.NgayBatDau, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.NgayKetThuc, "Ngày Kết Thúc", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.NgayKetThuc, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", required = "required" })
                        @Html.ValidationMessageFor(model => model.NgayKetThuc, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(m => m.TrangThai, "Trạng Thái", new { @class = "form-label" })
                        <span class="text-danger">*</span>
                        @Html.EnumDropDownListFor(m => m.TrangThai, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TrangThai, "", new { @class = "text-danger" })
                    </div>


                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.SoLuongToiDa, "Số lượng tối đa", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.SoLuongToiDa, new { @class = "form-control", type = "number", min = 1, required = "required" })
                        @Html.ValidationMessageFor(model => model.SoLuongToiDa, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.MoTa, "Mô Tả", new { @class = "form-label" })
                    @Html.TextAreaFor(model => model.MoTa, new { @class = "form-control", rows = 5, id = "MoTa" })
                    @Html.ValidationMessageFor(model => model.MoTa, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-12 mb-3">
                    @Html.Label("KhoaHocId", "Khóa Học", new { @class = "form-label" })
                    <select class="form-control" name="KhoaHocId" required>
                        <option value="">-- Chọn Khóa Học --</option>
                        @foreach (var khoaHoc in ViewBag.KhoaHocList)
                        {
                            <option value="@khoaHoc.KhoaHocId"
                                    @(Model.KhoaHoc != null && Model.KhoaHoc.KhoaHocId == khoaHoc.KhoaHocId ? "selected" : "")>
                                @khoaHoc.TenKhoaHoc
                            </option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-semibold">Tệp Đính Kèm (jpg, png, pdf, docx, xlsx, txt)</label>
                    <input type="file" name="attachments" multiple class="form-control" accept=".jpg,.jpeg,.png,.pdf,.docx,.xlsx,.txt,.pptx" />

                    @if (Model.LopHocAttachments != null && Model.LopHocAttachments.Any())
                    {
                        <h4 class="mt-4 text-primary">Tệp Đính Kèm</h4>
                        <ul class="list-group">
                            @foreach (var attachment in Model.LopHocAttachments)
                            {

                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <a href="@Url.Content(attachment.Attachment.FilePath)" target="_blank">@attachment.Attachment.FileName</a>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteAttachment('@attachment.Attachment.AttachmentId')">
                                        <i class="fas fa-trash-alt"></i> Xóa
                                    </button>
                                </li>
                            }
                        </ul>

                    }
                </div>

                <div class="text-center">
                    <button type="submit" class="btn btn-primary me-2 btn-lg">
                        <i class="fa-solid fa-save"></i> Lưu Thay Đổi
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg">
                        <i class="fas fa-arrow-left me-1"></i> Quay lại
                    </a>
                </div>
            }
        </div>
    </div>
</div>
<style>
    .ck-editor__editable {
        min-height: 150px;
        max-height: 600px;
        resize: vertical; /* Cho phép kéo theo chiều dọc */
        overflow-y: auto;
    }
    .form-label {
        font-weight: bold;
    }

    .form-control {
        padding: 0.75rem;
        font-size: 1rem;
    }

    .btn-lg {
        padding: 0.5rem 1.5rem;
        font-size: 1.125rem;
    }

    .card-header {
        font-size: 1.5rem;
    }

    .text-danger {
        font-size: 0.875rem;
    }

    .row {
        margin-bottom: 1.5rem;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
    }
</style>
<!-- Tích hợp CKEditor 5 -->
<script>
    $(document).ready(function () {
        // Xử lý form submission
        $('#editForm').on('submit', function (e) {
            var submitBtn = $('#submitBtn');
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fa-solid fa-spinner fa-spin"></i> Đang xử lý...');
        });
    function deleteAttachment(attachmentId) {
    if (confirm('Bạn có chắc chắn muốn xóa tệp này?')) {
        window.location.href = '/Admin/LopHoc/DeleteAttachment?attachmentId=' + attachmentId + '&lopHocId=@Model.LopHocId';
    }
}
    document.addEventListener('DOMContentLoaded', function () {
        // Khởi tạo CKEditor
        ClassicEditor
            .create(document.querySelector('#MoTa'))
            .then(editor => {
                console.log('CKEditor đã khởi tạo thành công.');

                const editorElement = editor.ui.view.editable.element;
                editorElement.style.overflowY = 'auto';

                // Điều chỉnh chiều cao tự động
                function adjustHeight() {
                    editorElement.style.height = 'auto';
                    editorElement.style.height = Math.min(editorElement.scrollHeight, 500) + 'px';
                }

                editor.model.document.on('change:data', adjustHeight);
                adjustHeight();
            })
            .catch(error => {
                console.error('Lỗi CKEditor:', error);
            });
    });
    document.getElementById('submitBtn').addEventListener('click', function () {
        this.disabled = true;  // Disable the submit button
        this.innerHTML = '<i class="fa-solid fa-circle-plus"></i> Đang Xử Lý...';  // Optionally change button text
    });
</script>
