@model QuanLyThongTinDaoTao.Models.BuoiHoc

@{
    ViewBag.Title = "Chỉnh Sửa Buổi Học";
    Layout = "~/Areas/Admin/Views/Shared/_MainAdminLayout.cshtml";
}

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header bg-warning text-white text-center">
            <h3><i class="fa-solid fa-edit"></i> Chỉnh Sửa Buổi Học</h3>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Edit", "BuoiHoc", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.BuoiHocId)

                <div class="mb-3">
                    @Html.Label("LopHocId", "Lớp Học", new { @class = "form-label" })
                    <select class="form-control" name="LopHocId" required>
                        <option value="">-- Chọn Lớp Học --</option>
                        @foreach (var lopHoc in ViewBag.LopHocList)
                        {
                            var ngayBatDau = lopHoc.NgayBatDau != null ? ((DateTime)lopHoc.NgayBatDau).ToString("dd/MM/yyyy") : "??";
                            var ngayKetThuc = lopHoc.NgayKetThuc != null ? ((DateTime)lopHoc.NgayKetThuc).ToString("dd/MM/yyyy") : "??";

                            <option value="@lopHoc.LopHocId" @(lopHoc.LopHocId == Model.LopHocId ? "selected" : "")>
                                @lopHoc.TenLopHoc - (@ngayBatDau - @ngayKetThuc)
                            </option>
                        }

                    </select>
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.NgayHoc, "Ngày Học", new { @class = "form-label" })

                    @Html.TextBoxFor(model => model.NgayHoc, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                    <small class="text-danger" id="NgayHocError"></small>
                    @Html.ValidationMessageFor(model => model.NgayHoc, "", new { @class = "text-danger" })
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.GioBatDau, "Giờ Bắt Đầu", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.GioBatDau, new { @class = "form-control", type = "time", id = "GioBatDau" })
                        @Html.ValidationMessageFor(model => model.GioBatDau, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(model => model.GioKetThuc, "Giờ Kết Thúc", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.GioKetThuc, new { @class = "form-control", type = "time", id = "GioKetThuc" })
                        @Html.ValidationMessageFor(model => model.GioKetThuc, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12 mb-3">
                    <label class="form-label">Chọn Giảng Viên</label>

                    <div id="giangVienContainer" class="border rounded p-2" style="max-height: 300px; overflow-y: auto;">
                        <!-- Sẽ được cập nhật bằng JS -->
                    </div>
                </div>

                <!-- Tệp Đính Kèm -->
                <div class="mb-3">
                    <label for="attachments" class="form-label">Tệp Đính Kèm (JPG, PNG, PDF, DOCX, TXT)</label>
                    <input type="file" name="attachments" id="attachments" class="form-control" multiple />
                </div>

                <div class="col-md-6 mb-3">
                    <label class="form-label fw-semibold">Tệp Đính Kèm (jpg, png, pdf, docx, xlsx, txt)</label>
                    <input type="file" name="attachments" multiple class="form-control" accept=".jpg,.jpeg,.png,.pdf,.docx,.xlsx,.txt,.pptx" />

                    @if (Model.BuoiHocAttachments != null && Model.BuoiHocAttachments.Any())
                    {
                        <h4 class="mt-4 text-primary">Tệp Đính Kèm</h4>
                        <ul class="list-group">
                            @foreach (var attachment in Model.BuoiHocAttachments)
                            {

                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <a href="@Url.Content(attachment.Attachment.FilePath)" target="_blank">@attachment.Attachment.FileName</a>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteAttachment('@attachment.Attachment.AttachmentId')">
                                        <i class="fas fa-trash-alt"></i> Xóa
                                    </button>
                                </li>
                            }
                        </ul>

                    }
                </div>
                <small class="text-danger" id="GioHocError"></small>

                <div class="mb-3">
                    @Html.LabelFor(model => model.GhiChu, "Ghi Chú", new { @class = "form-label" })
                    @Html.TextAreaFor(model => model.GhiChu, new { @class = "form-control", rows = 5, id = "GhiChu" })
                </div>

                <div class="text-center">
                    <button type="submit" class="btn btn-warning btn-lg">
                        <i class="fa-solid fa-save"></i> Lưu Thay Đổi
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg">
                        <i class="fas fa-arrow-left"></i> Quay lại
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .ck-editor__editable {
        min-height: 150px;
        max-height: 600px;
        resize: vertical;
        overflow-y: auto;
    }
    .form-label {
        font-weight: bold;
    }

    .form-control {
        padding: 0.75rem;
        font-size: 1rem;
    }

    .btn-lg {
        padding: 0.5rem 1.5rem;
        font-size: 1.125rem;
    }

    .card-header {
        font-size: 1.5rem;
    }

    .text-danger {
        font-size: 0.875rem;
    }

    .row {
        margin-bottom: 1.5rem;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
    }
</style>

<!-- Tích hợp CKEditor 5 -->
<script>
      function deleteAttachment(attachmentId) {
      if (confirm('Bạn có chắc chắn muốn xóa tệp này?')) {
          window.location.href = '/Admin/BuoiHoc/DeleteAttachment?attachmentId=' + attachmentId + '&buoiHocId=@Model.BuoiHocId';
      }
  }
    document.addEventListener('DOMContentLoaded', function () {
    ClassicEditor
        .create(document.querySelector('#GhiChu'), {
            ckfinder: {
                uploadUrl: '@Url.Action("UploadImage", "BuoiHoc", new { area = "Admin" })',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            },
            toolbar: {
                items: [
                    'heading', '|',
                    'bold', 'italic', 'link', '|',
                    'bulletedList', 'numberedList', '|',
                    'imageUpload', 'blockQuote', 'undo', 'redo'
                ]
            },
            language: 'vi'
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(error => {
            console.error('CKEditor lỗi:', error);
        });
});
   function fetchAvailableGiangViens() {
        const ngayHoc = document.querySelector('[name="NgayHoc"]').value;
        const gioBatDau = document.querySelector('[name="GioBatDau"]').value;
        const gioKetThuc = document.querySelector('[name="GioKetThuc"]').value;
        const buoiHocId = document.querySelector('[name="BuoiHocId"]').value;

        if (!ngayHoc || !gioBatDau || !gioKetThuc) return;

        $.ajax({
            type: "POST",
            url: '@Url.Action("GetAvailableGiangViens", "BuoiHoc")',
            data: {
                ngayHoc: ngayHoc,
                gioBatDau: gioBatDau,
                gioKetThuc: gioKetThuc,
                buoiHocId: buoiHocId
            },
            success: function (data) {
                const container = $('#giangVienContainer');
                container.empty();

                data.forEach(gv => {
                    const isChecked = gv.IsSelected === true || gv.IsSelected === "True" ? 'checked' : '';
                    let html = '';

                    if (gv.IsBusy && gv.IsSelected) {
                        html = `
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedGiangViens" value="${gv.NguoiDungId}" id="gv_${gv.NguoiDungId}" ${isChecked} />
                                <label class="form-check-label text-warning" for="gv_${gv.NguoiDungId}">${gv.HoVaTen} (bận - đã chọn)</label>
                            </div>`;
                    } else if (gv.IsBusy) {
                        html = `
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" disabled />
                                <label class="form-check-label text-muted">${gv.HoVaTen} (bận)</label>
                            </div>`;
                    } else {
                        html = `
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedGiangViens" value="${gv.NguoiDungId}" id="gv_${gv.NguoiDungId}" ${isChecked} />
                                <label class="form-check-label" for="gv_${gv.NguoiDungId}">${gv.HoVaTen}</label>
                            </div>`;
                    }

                    container.append(html);
                });
            },
            error: function (err) {
                console.error("Lỗi khi tải danh sách giảng viên:", err);
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelector('[name="NgayHoc"]').addEventListener('change', fetchAvailableGiangViens);
        document.querySelector('[name="GioBatDau"]').addEventListener('change', fetchAvailableGiangViens);
        document.querySelector('[name="GioKetThuc"]').addEventListener('change', fetchAvailableGiangViens);

        // Gọi khi trang load
        fetchAvailableGiangViens();
    });
</script>
